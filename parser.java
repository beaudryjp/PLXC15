
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 25 19:10:09 CET 2020
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 25 19:10:09 CET 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\041\002\000\002\042" +
    "\002\000\002\005\012\000\002\043\002\000\002\044\002" +
    "\000\002\006\011\000\002\045\002\000\002\007\012\000" +
    "\002\046\002\000\002\047\002\000\002\050\002\000\002" +
    "\010\016\000\002\051\002\000\002\052\002\000\002\011" +
    "\013\000\002\053\002\000\002\012\011\000\002\054\002" +
    "\000\002\055\002\000\002\013\013\000\002\014\007\000" +
    "\002\056\002\000\002\057\002\000\002\015\007\000\002" +
    "\015\004\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\060\002\000\002\032\006\000\002" +
    "\032\005\000\002\032\003\000\002\032\004\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\004\000" +
    "\002\061\002\000\002\033\006\000\002\062\002\000\002" +
    "\033\006\000\002\033\005\000\002\016\003\000\002\017" +
    "\003\000\002\020\003\000\002\021\003\000\002\023\003" +
    "\000\002\024\003\000\002\022\004\000\002\022\002\000" +
    "\002\004\004\000\002\004\002\000\002\031\003\000\002" +
    "\031\006\000\002\063\002\000\002\064\002\000\002\027" +
    "\007\000\002\027\005\000\002\030\004\000\002\030\005" +
    "\000\002\030\003\000\002\030\005\000\002\030\007\000" +
    "\002\030\002\000\002\065\002\000\002\066\002\000\002" +
    "\040\010\000\002\067\002\000\002\040\006\000\002\040" +
    "\002\000\002\037\003\000\002\037\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\003\000\002\026\003\000" +
    "\002\035\003\000\002\035\005\000\002\035\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\044\004\017\006\030\015\015\023\021\024" +
    "\043\036\023\040\035\041\050\042\047\043\027\044\034" +
    "\045\046\046\010\047\036\050\024\051\006\052\014\001" +
    "\002\000\024\004\241\015\015\023\021\024\043\045\046" +
    "\046\010\047\036\050\024\051\006\001\002\000\024\004" +
    "\017\015\015\023\021\024\043\045\046\046\010\047\036" +
    "\050\024\051\006\001\002\000\024\004\uff9e\015\uff9e\023" +
    "\uff9e\024\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\001\002\000\052\002\ufff5\004\ufff5\006\ufff5\007\ufff5\015" +
    "\ufff5\023\ufff5\024\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\001\002\000\062\005\uff99\006\uff99" +
    "\007\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016" +
    "\uff99\017\uff99\021\uff99\025\uff99\026\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\041\uff99\053\uff99\054" +
    "\uff99\055\uff99\056\uff99\001\002\000\052\002\ufff7\004\ufff7" +
    "\006\ufff7\007\ufff7\015\ufff7\023\ufff7\024\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\001\002\000" +
    "\052\002\ufff6\004\ufff6\006\ufff6\007\ufff6\015\ufff6\023\ufff6" +
    "\024\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\001\002\000\052\002\ufff4\004\ufff4\006\ufff4\007" +
    "\ufff4\015\ufff4\023\ufff4\024\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\052\ufff4\001\002\000\024\004\uffbc" +
    "\015\uffbc\023\uffbc\024\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\001\002\000\024\004\017\015\015\023\021" +
    "\024\043\045\046\046\010\047\036\050\024\051\006\001" +
    "\002\000\052\002\ufff9\004\ufff9\006\ufff9\007\ufff9\015\ufff9" +
    "\023\ufff9\024\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\001\002\000\024\004\017\015\015\023" +
    "\021\024\043\045\046\046\010\047\036\050\024\051\006" +
    "\001\002\000\006\012\225\013\224\001\002\000\004\045" +
    "\046\001\002\000\052\002\ufffc\004\ufffc\006\ufffc\007\ufffc" +
    "\015\ufffc\023\ufffc\024\ufffc\036\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\001\002\000\004\004\uffbf\001" +
    "\002\000\024\004\uff9f\015\uff9f\023\uff9f\024\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\051\uff9f\001\002\000\016\012" +
    "\222\014\063\015\065\016\064\017\066\021\062\001\002" +
    "\000\046\002\221\004\017\006\030\015\015\023\021\024" +
    "\043\036\023\040\035\041\050\042\047\043\027\044\034" +
    "\045\046\046\010\047\036\050\024\051\006\052\014\001" +
    "\002\000\004\045\uffa1\001\002\000\046\004\uffde\006\uffde" +
    "\007\213\015\uffde\023\uffde\024\uffde\036\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\001\002\000\052\002\ufffa\004" +
    "\ufffa\006\ufffa\007\ufffa\015\ufffa\023\ufffa\024\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\001\002" +
    "\000\050\002\000\004\000\006\000\007\000\015\000\023" +
    "\000\024\000\036\000\040\000\041\000\042\000\043\000" +
    "\044\000\045\000\046\000\047\000\050\000\051\000\052" +
    "\000\001\002\000\070\005\uff9a\006\uff9a\007\uff9a\011\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\021" +
    "\uff9a\022\uffd0\023\204\024\206\025\uff9a\026\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\041\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\001\002\000\004\045\uffa0" +
    "\001\002\000\004\004\uffbe\001\002\000\062\005\uff98\006" +
    "\uff98\007\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\017\uff98\021\uff98\025\uff98\026\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\034\uff98\035\uff98\041\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\001\002\000\060\005\uffcd\006" +
    "\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\021\uffcd\025\uffcd\026\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\041\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\001\002\000\052\002\ufffb\004\ufffb\006" +
    "\ufffb\007\ufffb\015\ufffb\023\ufffb\024\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\001\002\000\004" +
    "\004\ufff0\001\002\000\044\004\uffed\006\uffed\015\uffed\023" +
    "\uffed\024\uffed\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\001\002\000\004\045\046\001\002\000\052\002\ufff8" +
    "\004\ufff8\006\ufff8\007\ufff8\015\ufff8\023\ufff8\024\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\001" +
    "\002\000\004\004\123\001\002\000\072\005\uffb5\006\uffb5" +
    "\007\uffb5\010\120\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\041\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\001\002\000\004\004\114\001\002\000\044\004\uffbd\006" +
    "\uffbd\015\uffbd\023\uffbd\024\uffbd\036\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\001\002\000\004\045\uffb3\001\002" +
    "\000\004\045\053\001\002\000\014\010\uffb2\012\uffb2\013" +
    "\uffb2\022\uffb2\045\uffb2\001\002\000\014\010\056\012\uffaa" +
    "\013\uffaa\022\060\045\046\001\002\000\010\012\uffad\013" +
    "\uffad\022\112\001\002\000\024\004\017\015\015\023\021" +
    "\024\043\045\046\046\010\047\036\050\024\051\006\001" +
    "\002\000\006\012\uffb1\013\uffb1\001\002\000\024\004\017" +
    "\015\015\023\021\024\043\045\046\046\010\047\036\050" +
    "\024\051\006\001\002\000\020\012\uffaf\013\uffaf\014\063" +
    "\015\065\016\064\017\066\021\062\001\002\000\024\004" +
    "\017\015\015\023\021\024\043\045\046\046\010\047\036" +
    "\050\024\051\006\001\002\000\024\004\017\015\015\023" +
    "\021\024\043\045\046\046\010\047\036\050\024\051\006" +
    "\001\002\000\024\004\017\015\015\023\021\024\043\045" +
    "\046\046\010\047\036\050\024\051\006\001\002\000\024" +
    "\004\017\015\015\023\021\024\043\045\046\046\010\047" +
    "\036\050\024\051\006\001\002\000\024\004\017\015\015" +
    "\023\021\024\043\045\046\046\010\047\036\050\024\051" +
    "\006\001\002\000\060\005\uffd7\006\uffd7\007\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\021" +
    "\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\041\uffd7\053\uffd7\054\uffd7\055\uffd7\001" +
    "\002\000\060\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\064\017\066\021\062\025" +
    "\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\041\uffd9\053\uffd9\054\uffd9\055\uffd9\001\002\000" +
    "\060\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\025\uffd8\026" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\041\uffd8\053\uffd8\054\uffd8\055\uffd8\001\002\000\060\005" +
    "\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\064\017\066\021\062\025\uffda\026\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\041\uffda" +
    "\053\uffda\054\uffda\055\uffda\001\002\000\060\005\uffd6\006" +
    "\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\021\uffd6\025\uffd6\026\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\041\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\001\002\000\016\011\075\014\063\015" +
    "\065\016\064\017\066\021\062\001\002\000\010\012\uffac" +
    "\013\uffac\022\076\001\002\000\010\006\100\012\uffa4\013" +
    "\077\001\002\000\024\004\017\015\015\023\021\024\043" +
    "\045\046\046\010\047\036\050\024\051\006\001\002\000" +
    "\024\004\017\015\015\023\021\024\043\045\046\046\010" +
    "\047\036\050\024\051\006\001\002\000\006\012\uffab\013" +
    "\uffab\001\002\000\022\006\uffa9\007\uffa9\013\uffa9\014\063" +
    "\015\065\016\064\017\066\021\062\001\002\000\010\006" +
    "\100\007\uffa4\013\077\001\002\000\004\007\uffa8\001\002" +
    "\000\004\007\106\001\002\000\060\005\uffa7\006\uffa7\007" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\017\uffa7\021\uffa7\025\uffa7\026\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\041\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\001\002\000\060\005\uffa6\006\uffa6\007\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\063\015\065\016\064\017\066" +
    "\021\062\025\uffa6\026\uffa6\030\uffa6\031\uffa6\032\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\041\uffa6\053\uffa6\054\uffa6\055\uffa6" +
    "\001\002\000\060\005\uffa4\006\100\007\uffa4\011\uffa4\012" +
    "\uffa4\013\077\014\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4" +
    "\025\uffa4\026\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\041\uffa4\053\uffa4\054\uffa4\055\uffa4\001\002" +
    "\000\060\005\uffa5\006\uffa5\007\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\021\uffa5\025\uffa5" +
    "\026\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\041\uffa5\053\uffa5\054\uffa5\055\uffa5\001\002\000\024" +
    "\004\017\015\015\023\021\024\043\045\046\046\010\047" +
    "\036\050\024\051\006\001\002\000\020\012\uffae\013\uffae" +
    "\014\063\015\065\016\064\017\066\021\062\001\002\000" +
    "\024\004\017\015\015\023\021\024\043\045\046\046\010" +
    "\047\036\050\024\051\006\001\002\000\016\005\116\014" +
    "\063\015\065\016\064\017\066\021\062\001\002\000\004" +
    "\012\117\001\002\000\052\002\uffdf\004\uffdf\006\uffdf\007" +
    "\uffdf\015\uffdf\023\uffdf\024\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\001\002\000\024\004\017" +
    "\015\015\023\021\024\043\045\046\046\010\047\036\050" +
    "\024\051\006\001\002\000\016\011\122\014\063\015\065" +
    "\016\064\017\066\021\062\001\002\000\070\005\uffb4\006" +
    "\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\041\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\001" +
    "\002\000\026\004\124\015\015\023\021\024\043\027\127" +
    "\045\046\046\010\047\036\050\024\051\006\001\002\000" +
    "\026\004\124\015\015\023\021\024\043\027\127\045\046" +
    "\046\010\047\036\050\024\051\006\001\002\000\010\005" +
    "\ufff3\025\131\026\132\001\002\000\030\014\063\015\065" +
    "\016\064\017\066\021\062\030\143\031\141\032\142\033" +
    "\144\034\140\035\137\001\002\000\026\004\124\015\015" +
    "\023\021\024\043\027\127\045\046\046\010\047\036\050" +
    "\024\051\006\001\002\000\012\005\uffc5\012\uffc5\025\uffc5" +
    "\026\uffc5\001\002\000\026\004\uffc4\015\uffc4\023\uffc4\024" +
    "\uffc4\027\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\001\002\000\026\004\uffc2\015\uffc2\023\uffc2\024\uffc2\027" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002" +
    "\000\026\004\124\015\015\023\021\024\043\027\127\045" +
    "\046\046\010\047\036\050\024\051\006\001\002\000\012" +
    "\005\uffc1\012\uffc1\025\131\026\uffc1\001\002\000\026\004" +
    "\124\015\015\023\021\024\043\027\127\045\046\046\010" +
    "\047\036\050\024\051\006\001\002\000\012\005\uffc3\012" +
    "\uffc3\025\uffc3\026\uffc3\001\002\000\024\004\017\015\015" +
    "\023\021\024\043\045\046\046\010\047\036\050\024\051" +
    "\006\001\002\000\024\004\017\015\015\023\021\024\043" +
    "\045\046\046\010\047\036\050\024\051\006\001\002\000" +
    "\024\004\017\015\015\023\021\024\043\045\046\046\010" +
    "\047\036\050\024\051\006\001\002\000\024\004\017\015" +
    "\015\023\021\024\043\045\046\046\010\047\036\050\024" +
    "\051\006\001\002\000\024\004\017\015\015\023\021\024" +
    "\043\045\046\046\010\047\036\050\024\051\006\001\002" +
    "\000\024\004\017\015\015\023\021\024\043\045\046\046" +
    "\010\047\036\050\024\051\006\001\002\000\024\005\uffc6" +
    "\012\uffc6\014\063\015\065\016\064\017\066\021\062\025" +
    "\uffc6\026\uffc6\001\002\000\024\005\uffc9\012\uffc9\014\063" +
    "\015\065\016\064\017\066\021\062\025\uffc9\026\uffc9\001" +
    "\002\000\024\005\uffc8\012\uffc8\014\063\015\065\016\064" +
    "\017\066\021\062\025\uffc8\026\uffc8\001\002\000\024\005" +
    "\uffc7\012\uffc7\014\063\015\065\016\064\017\066\021\062" +
    "\025\uffc7\026\uffc7\001\002\000\024\005\uffcb\012\uffcb\014" +
    "\063\015\065\016\064\017\066\021\062\025\uffcb\026\uffcb" +
    "\001\002\000\024\005\uffca\012\uffca\014\063\015\065\016" +
    "\064\017\066\021\062\025\uffca\026\uffca\001\002\000\004" +
    "\005\154\001\002\000\044\004\017\006\030\015\015\023" +
    "\021\024\043\036\023\040\035\041\050\042\047\043\027" +
    "\044\034\045\046\046\010\047\036\050\024\051\006\052" +
    "\014\001\002\000\052\002\ufff2\004\ufff2\006\ufff2\007\ufff2" +
    "\015\ufff2\023\ufff2\024\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\001\002\000\052\002\uffb6\004" +
    "\uffb6\006\uffb6\007\uffb6\015\uffb6\023\uffb6\024\uffb6\036\uffb6" +
    "\037\157\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\001\002" +
    "\000\044\004\017\006\030\015\015\023\021\024\043\036" +
    "\023\040\035\041\050\042\047\043\027\044\034\045\046" +
    "\046\010\047\036\050\024\051\006\052\014\001\002\000" +
    "\052\002\ufff1\004\ufff1\006\ufff1\007\ufff1\015\ufff1\023\ufff1" +
    "\024\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\052\ufff1\001\002\000\052\002\uffb7\004\uffb7\006\uffb7\007" +
    "\uffb7\015\uffb7\023\uffb7\024\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\001\002\000\010\005\165" +
    "\025\131\026\132\001\002\000\032\005\164\014\063\015" +
    "\065\016\064\017\066\021\062\030\143\031\141\032\142" +
    "\033\144\034\140\035\137\001\002\000\060\005\uffce\006" +
    "\uffce\007\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\021\uffce\025\uffce\026\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\041\uffce\053\uffce" +
    "\054\uffce\055\uffce\001\002\000\012\005\uffc0\012\uffc0\025" +
    "\uffc0\026\uffc0\001\002\000\060\005\uffd1\006\uffd1\007\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\021\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\041\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\001\002\000\044\004\017\006\030\015\015\023\021" +
    "\024\043\036\023\040\035\041\050\042\047\043\027\044" +
    "\034\045\046\046\010\047\036\050\024\051\006\052\014" +
    "\001\002\000\004\040\171\001\002\000\004\004\172\001" +
    "\002\000\026\004\124\015\015\023\021\024\043\027\127" +
    "\045\046\046\010\047\036\050\024\051\006\001\002\000" +
    "\010\005\174\025\131\026\132\001\002\000\004\012\175" +
    "\001\002\000\052\002\uffec\004\uffec\006\uffec\007\uffec\015" +
    "\uffec\023\uffec\024\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\001\002\000\004\004\177\001\002" +
    "\000\026\004\124\015\015\023\021\024\043\027\127\045" +
    "\046\046\010\047\036\050\024\051\006\001\002\000\010" +
    "\005\uffef\025\131\026\132\001\002\000\004\005\202\001" +
    "\002\000\044\004\017\006\030\015\015\023\021\024\043" +
    "\036\023\040\035\041\050\042\047\043\027\044\034\045" +
    "\046\046\010\047\036\050\024\051\006\052\014\001\002" +
    "\000\052\002\uffee\004\uffee\006\uffee\007\uffee\015\uffee\023" +
    "\uffee\024\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\001\002\000\060\005\uffd4\006\uffd4\007\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\021\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\041\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\001\002\000\004\022\207\001\002\000\060\005\uffd2" +
    "\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\021\uffd2\025\uffd2\026\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\041\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\001\002\000\100\004\017\005\uffa4" +
    "\006\100\007\uffa4\011\uffa4\012\uffa4\013\077\014\uffa4\015" +
    "\015\016\uffa4\017\uffa4\021\uffa4\023\021\024\043\025\uffa4" +
    "\026\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\041\uffa4\045\046\046\010\047\036\050\024\051\006" +
    "\053\uffa4\054\uffa4\055\uffa4\001\002\000\060\005\uffa2\006" +
    "\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\021\uffa2\025\uffa2\026\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\041\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\001\002\000\060\005\uffa3\006\uffa3\007" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\014\063\015\065\016\064" +
    "\017\066\021\062\025\uffa3\026\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\041\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\001\002\000\060\005\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\021\uffcf\025\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\041\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\001\002\000\052\002\uffdb\004\uffdb\006\uffdb\007\uffdb\015" +
    "\uffdb\023\uffdb\024\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\001\002\000\044\004\017\006\030" +
    "\015\015\023\021\024\043\036\023\040\035\041\050\042" +
    "\047\043\027\044\034\045\046\046\010\047\036\050\024" +
    "\051\006\052\014\001\002\000\046\004\017\006\030\007" +
    "\uffdd\015\015\023\021\024\043\036\023\040\035\041\050" +
    "\042\047\043\027\044\034\045\046\046\010\047\036\050" +
    "\024\051\006\052\014\001\002\000\004\007\220\001\002" +
    "\000\050\002\uffff\004\uffff\006\uffff\007\uffff\015\uffff\023" +
    "\uffff\024\uffff\036\uffff\040\uffff\041\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052" +
    "\uffff\001\002\000\052\002\uffdc\004\uffdc\006\uffdc\007\uffdc" +
    "\015\uffdc\023\uffdc\024\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\001\002\000\004\002\001\001" +
    "\002\000\052\002\ufffd\004\ufffd\006\ufffd\007\ufffd\015\ufffd" +
    "\023\ufffd\024\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\001\002\000\060\005\uffd3\006\uffd3\007" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\021\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\041\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\001\002\000\014\010\056\012\uffaa\013\uffaa\022" +
    "\060\045\046\001\002\000\052\002\ufffe\004\ufffe\006\ufffe" +
    "\007\ufffe\015\ufffe\023\ufffe\024\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\052\ufffe\001\002\000\006\012" +
    "\uffb0\013\uffb0\001\002\000\016\005\164\014\063\015\065" +
    "\016\064\017\066\021\062\001\002\000\060\005\uffd5\006" +
    "\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\021\uffd5\025\uffd5\026\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\041\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\001\002\000\060\005\uffcd\006\uffcd\007" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\234" +
    "\017\235\021\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\041\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\001\002\000\060\005\uffcc\006\uffcc\007\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\021\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\041\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\001\002\000\060\005\uff9d\006\uff9d\007\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\014\063\015\065\016\064\017\066\021\062" +
    "\025\uff9d\026\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\041\uff9d\053\uff9d\054\uff9d\055\uff9d\001\002" +
    "\000\010\045\046\046\010\047\036\001\002\000\010\045" +
    "\046\046\010\047\036\001\002\000\060\005\uff9b\006\uff9b" +
    "\007\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\021\uff9b\025\uff9b\026\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\041\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\001\002\000\060\005\uff9a\006\uff9a\007\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\021\uff9a\025\uff9a\026\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\041\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\001\002\000\060\005\uff9c\006\uff9c\007\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\021" +
    "\uff9c\025\uff9c\026\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\041\uff9c\053\uff9c\054\uff9c\055\uff9c\001" +
    "\002\000\024\004\017\015\015\023\021\024\043\045\046" +
    "\046\010\047\036\050\024\051\006\001\002\000\022\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\053\uffcd\055\uffcd" +
    "\056\266\001\002\000\020\014\063\015\065\016\064\017" +
    "\066\021\062\053\244\055\245\001\002\000\024\004\uffbb" +
    "\015\uffbb\023\uffbb\024\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\001\002\000\024\004\uffba\015\uffba\023\uffba" +
    "\024\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\001" +
    "\002\000\024\004\017\015\015\023\021\024\043\045\046" +
    "\046\010\047\036\050\024\051\006\001\002\000\024\004" +
    "\017\015\015\023\021\024\043\045\046\046\010\047\036" +
    "\050\024\051\006\001\002\000\020\014\063\015\065\016" +
    "\064\017\066\021\062\041\uffe2\054\uffe2\001\002\000\006" +
    "\041\uffb8\054\252\001\002\000\024\004\017\015\015\023" +
    "\021\024\043\045\046\046\010\047\036\050\024\051\006" +
    "\001\002\000\004\041\254\001\002\000\044\004\uffe1\006" +
    "\uffe1\015\uffe1\023\uffe1\024\uffe1\036\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\001\002\000\044\004\017\006\030" +
    "\015\015\023\021\024\043\036\023\040\035\041\050\042" +
    "\047\043\027\044\034\045\046\046\010\047\036\050\024" +
    "\051\006\052\014\001\002\000\052\002\uffe0\004\uffe0\006" +
    "\uffe0\007\uffe0\015\uffe0\023\uffe0\024\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\001\002\000\016" +
    "\014\063\015\065\016\064\017\066\021\062\041\uffb9\001" +
    "\002\000\020\014\063\015\065\016\064\017\066\021\062" +
    "\041\uffe7\054\uffe7\001\002\000\006\041\uffb8\054\252\001" +
    "\002\000\004\041\263\001\002\000\044\004\uffe6\006\uffe6" +
    "\015\uffe6\023\uffe6\024\uffe6\036\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\001\002\000\044\004\017\006\030\015" +
    "\015\023\021\024\043\036\023\040\035\041\050\042\047" +
    "\043\027\044\034\045\046\046\010\047\036\050\024\051" +
    "\006\052\014\001\002\000\052\002\uffe5\004\uffe5\006\uffe5" +
    "\007\uffe5\015\uffe5\023\uffe5\024\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\001\002\000\032\004" +
    "\017\006\100\013\077\015\015\023\021\024\043\041\uffa4" +
    "\045\046\046\010\047\036\050\024\051\006\001\002\000" +
    "\004\041\uffe4\001\002\000\004\041\271\001\002\000\044" +
    "\004\017\006\030\015\015\023\021\024\043\036\023\040" +
    "\035\041\050\042\047\043\027\044\034\045\046\046\010" +
    "\047\036\050\024\051\006\052\014\001\002\000\052\002" +
    "\uffe3\004\uffe3\006\uffe3\007\uffe3\015\uffe3\023\uffe3\024\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\001\002\000\020\005\164\012\274\014\063\015\065\016" +
    "\064\017\066\021\062\001\002\000\026\004\uffeb\015\uffeb" +
    "\023\uffeb\024\uffeb\027\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\001\002\000\026\004\124\015\015\023\021" +
    "\024\043\027\127\045\046\046\010\047\036\050\024\051" +
    "\006\001\002\000\010\012\277\025\131\026\132\001\002" +
    "\000\024\004\uffea\015\uffea\023\uffea\024\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\001\002\000\024\004\017" +
    "\015\015\023\021\024\043\045\046\046\010\047\036\050" +
    "\024\051\006\001\002\000\016\005\302\014\063\015\065" +
    "\016\064\017\066\021\062\001\002\000\044\004\uffe9\006" +
    "\uffe9\015\uffe9\023\uffe9\024\uffe9\036\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\001\002\000\044\004\017\006\030" +
    "\015\015\023\021\024\043\036\023\040\035\041\050\042" +
    "\047\043\027\044\034\045\046\046\010\047\036\050\024" +
    "\051\006\052\014\001\002\000\052\002\uffe8\004\uffe8\006" +
    "\uffe8\007\uffe8\015\uffe8\023\uffe8\024\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\054\002\025\003\031\005\021\006\037\007" +
    "\030\010\015\011\043\012\011\013\010\014\006\015\012" +
    "\016\044\017\040\020\041\021\003\025\050\026\004\027" +
    "\017\031\032\032\024\034\036\001\001\000\012\026\004" +
    "\031\032\032\242\034\241\001\001\000\014\026\004\031" +
    "\032\032\232\034\230\035\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\004\031\032\032\227\034\036\001\001\000\002\001" +
    "\001\000\012\026\004\031\032\032\226\034\036\001\001" +
    "\000\002\001\001\000\004\031\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\216\005\021\006\037\007\030\010\015\011" +
    "\043\012\011\013\010\014\006\015\012\016\044\017\040" +
    "\020\041\021\003\025\050\026\004\027\017\031\032\032" +
    "\024\034\036\001\001\000\002\001\001\000\004\056\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\175\001\001\000\004\045\166\001\001\000\004\031\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\051" +
    "\001\001\000\002\001\001\000\004\064\053\001\001\000" +
    "\006\030\056\031\054\001\001\000\002\001\001\000\012" +
    "\026\004\031\032\032\073\034\036\001\001\000\002\001" +
    "\001\000\012\026\004\031\032\032\060\034\036\001\001" +
    "\000\002\001\001\000\012\026\004\031\032\032\072\034" +
    "\036\001\001\000\012\026\004\031\032\032\071\034\036" +
    "\001\001\000\012\026\004\031\032\032\070\034\036\001" +
    "\001\000\012\026\004\031\032\032\067\034\036\001\001" +
    "\000\012\026\004\031\032\032\066\034\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\100\001\001\000\012\026\004\031\032" +
    "\032\106\034\036\001\001\000\012\026\004\031\032\032" +
    "\101\034\036\001\001\000\002\001\001\000\004\065\102" +
    "\001\001\000\004\040\103\001\001\000\004\066\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\107" +
    "\001\001\000\004\040\110\001\001\000\002\001\001\000" +
    "\012\026\004\031\032\032\112\034\036\001\001\000\002" +
    "\001\001\000\012\026\004\031\032\032\114\034\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\004\031\032\032\120\034\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\026\004\031\032" +
    "\032\125\033\124\034\036\001\001\000\014\026\004\031" +
    "\032\032\162\033\161\034\036\001\001\000\004\041\152" +
    "\001\001\000\002\001\001\000\014\026\004\031\032\032" +
    "\125\033\127\034\036\001\001\000\002\001\001\000\004" +
    "\061\134\001\001\000\004\062\132\001\001\000\014\026" +
    "\004\031\032\032\125\033\133\034\036\001\001\000\002" +
    "\001\001\000\014\026\004\031\032\032\125\033\135\034" +
    "\036\001\001\000\002\001\001\000\012\026\004\031\032" +
    "\032\151\034\036\001\001\000\012\026\004\031\032\032" +
    "\150\034\036\001\001\000\012\026\004\031\032\032\147" +
    "\034\036\001\001\000\012\026\004\031\032\032\146\034" +
    "\036\001\001\000\012\026\004\031\032\032\145\034\036" +
    "\001\001\000\012\026\004\031\032\032\144\034\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\154\005\021\006\037\007\030" +
    "\010\015\011\043\012\011\013\010\014\006\015\012\016" +
    "\044\017\040\020\041\021\003\025\050\026\004\027\017" +
    "\031\032\032\024\034\036\001\001\000\004\042\155\001" +
    "\001\000\004\004\157\001\001\000\052\003\160\005\021" +
    "\006\037\007\030\010\015\011\043\012\011\013\010\014" +
    "\006\015\012\016\044\017\040\020\041\021\003\025\050" +
    "\026\004\027\017\031\032\032\024\034\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\167\005\021\006\037\007\030\010\015" +
    "\011\043\012\011\013\010\014\006\015\012\016\044\017" +
    "\040\020\041\021\003\025\050\026\004\027\017\031\032" +
    "\032\024\034\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\026\004\031\032\032\125\033\172\034\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\026\004\031\032\032\125" +
    "\033\177\034\036\001\001\000\004\044\200\001\001\000" +
    "\002\001\001\000\052\003\202\005\021\006\037\007\030" +
    "\010\015\011\043\012\011\013\010\014\006\015\012\016" +
    "\044\017\040\020\041\021\003\025\050\026\004\027\017" +
    "\031\032\032\024\034\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\026\004\031\032\032\210\034\036\037\211\040\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\002\214\003\031\005\021\006" +
    "\037\007\030\010\015\011\043\012\011\013\010\014\006" +
    "\015\012\016\044\017\040\020\041\021\003\025\050\026" +
    "\004\027\017\031\032\032\024\034\036\001\001\000\054" +
    "\003\216\005\021\006\037\007\030\010\015\011\043\012" +
    "\011\013\010\014\006\015\012\016\044\017\040\020\041" +
    "\021\003\025\050\026\004\027\017\031\032\032\024\034" +
    "\036\057\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\225\031\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\236\034\237\001\001\000\006\031\236\034" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\004\031\032\032\272\034\036\001" +
    "\001\000\002\001\001\000\006\023\245\024\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\004\031" +
    "\032\032\257\034\036\001\001\000\012\026\004\031\032" +
    "\032\247\034\036\001\001\000\004\054\250\001\001\000" +
    "\004\022\252\001\001\000\012\026\004\031\032\032\256" +
    "\034\036\001\001\000\002\001\001\000\004\055\254\001" +
    "\001\000\052\003\255\005\021\006\037\007\030\010\015" +
    "\011\043\012\011\013\010\014\006\015\012\016\044\017" +
    "\040\020\041\021\003\025\050\026\004\027\017\031\032" +
    "\032\024\034\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\260\001\001\000\004\022\261\001\001" +
    "\000\002\001\001\000\004\052\263\001\001\000\052\003" +
    "\264\005\021\006\037\007\030\010\015\011\043\012\011" +
    "\013\010\014\006\015\012\016\044\017\040\020\041\021" +
    "\003\025\050\026\004\027\017\031\032\032\024\034\036" +
    "\001\001\000\002\001\001\000\016\026\004\031\032\032" +
    "\210\034\036\037\266\040\207\001\001\000\004\053\267" +
    "\001\001\000\002\001\001\000\052\003\271\005\021\006" +
    "\037\007\030\010\015\011\043\012\011\013\010\014\006" +
    "\015\012\016\044\017\040\020\041\021\003\025\050\026" +
    "\004\027\017\031\032\032\024\034\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\274\001\001\000" +
    "\014\026\004\031\032\032\125\033\275\034\036\001\001" +
    "\000\002\001\001\000\004\047\277\001\001\000\012\026" +
    "\004\031\032\032\300\034\036\001\001\000\002\001\001" +
    "\000\004\050\302\001\001\000\052\003\303\005\021\006" +
    "\037\007\030\010\015\011\043\012\011\013\010\014\006" +
    "\015\012\016\044\017\040\020\041\021\003\025\050\026" +
    "\004\027\017\031\032\032\024\034\036\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operator ::= FLOAT 
            {
              Tag RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Tag(n, Type.FLOAT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operator ::= INT 
            {
              Tag RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Tag(n, Type.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operator ::= variable 
            {
              Tag RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String tmp = v;
                                                                        if(v.contains("[")) 
                                                                            tmp = v.substring(0, v.indexOf("["));
                                                                        if(!SymbolTable.find(tmp)){
                                                                            Generator.varNotDeclared(v); 
                                                                        }
                                                                        else {
                                                                            RESULT = new Tag(v, SymbolTable.get(tmp));
                                                                        } 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cast ::= operator DIV operator 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.cast(Generator.DIV, Type.FLOAT, e1, e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cast ::= operator MUL operator 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.cast(Generator.MUL, Type.FLOAT, e1, e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cast ::= expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // typeCast ::= CAST_FLOAT 
            {
              String RESULT =null;
		  RESULT = Type.FLOAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeCast",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // typeCast ::= CAST_INT 
            {
              String RESULT =null;
		  RESULT = Type.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeCast",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type ::= VAR_FLOAT 
            {
              String RESULT =null;
		  RESULT = Type.FLOAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type ::= VAR_INT 
            {
              String RESULT =null;
		  RESULT = Type.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assignedValue ::= initArray 
            {
              Tag RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag i = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignedValue",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignedValue ::= expression 
            {
              Tag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignedValue",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // initArray ::= 
            {
              Tag RESULT =null;
		  RESULT = new Tag(Generator.getArrTemp(), Generator.getArrPosition()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initArray",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // initArray ::= COMMA expression NT$22 initArray 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag i = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initArray",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$22 ::= 
            {
              Tag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.assignment(Generator.nextArrPosition(), e.getT());
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // initArray ::= OB expression NT$20 initArray NT$21 CB 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag i = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initArray",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$21 ::= 
            {
              Tag RESULT =(Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag i = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  RESULT = i;
                                                                        //RESULT.setF(Type.ARRAY + Generator.getArrPosition() + "(" + e.getF() + ")");
                                                                        RESULT.setF(Generator.getArrPosition() + e.getF());
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$20 ::= 
            {
              Tag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.initArrTemp(Generator.newTempVar());
                                                                        Generator.assignment(Generator.nextArrPosition(), e.getT());
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valueDeclaration ::= 
            {
              String RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueDeclaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valueDeclaration ::= OSB expression CSB ASIG initArray 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag n = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag i = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(SymbolTable.find(n.getT())){
                                                                            Generator.error("# ERROR: The size of the array is not defined.", true);
                                                                        }
                                                                        RESULT = Generator.arrIndex(n.getT());
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueDeclaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valueDeclaration ::= OSB expression CSB 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag n = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(SymbolTable.find(n.getT())){
                                                                            Generator.error("# ERROR: The size of the array is not defined.", true);
                                                                        }
                                                                        RESULT = Generator.arrIndex(n.getT());
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueDeclaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valueDeclaration ::= variable 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueDeclaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valueDeclaration ::= variable ASIG expression 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v; 
                                                                        Generator.assignment(v, e.getT()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueDeclaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valueDeclaration ::= ASIG expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e.getT(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueDeclaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // varDeclaration ::= varDeclaration COMMA valueDeclaration 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(SymbolTable.findInCurrentBlock(v)){
                                                                            Generator.varDeclared(v);
                                                                        }
                                                                        else{
                                                                            if(SymbolTable.find(v) && SymbolTable.getIndex() > 0)
                                                                                SymbolTable.put(SymbolTable.varBlock(v), t);
                                                                            else
                                                                                SymbolTable.put(v, t);
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // varDeclaration ::= type NT$18 VAR NT$19 valueDeclaration 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String tmp = SymbolTable.varBlock(v); //variable_blockIndex
                                                                        String varName = "";
                                                                        /* If val is not an array */
                                                                        if(val != null && !val.contains("[")){
                                                                            if(SymbolTable.find(v) && SymbolTable.getIndex() > 0)
                                                                                Generator.assignment(tmp, val);
                                                                            else
                                                                                Generator.assignment(v, val); 
                                                                        }
                                                                        /* If val is an array */
                                                                        if(val != null && val.contains("[")){
                                                                            type = Type.ARRAY + val + "(" + type + ")";
                                                                            RESULT = type;
                                                                            Generator.arrLength(v, val);
                                                                        }

                                                                        if(SymbolTable.find(v) && SymbolTable.getIndex() > 0){
                                                                            SymbolTable.put(tmp, type);
                                                                            varName = tmp;
                                                                        }
                                                                        else{
                                                                            SymbolTable.put(v, type); 
                                                                            varName = v;
                                                                        }
                                                                        /* it's an array initialization */
                                                                        if(!Generator.getArrTemp().isEmpty()){
                                                                            int maxSize = SymbolTable.sizeArray(varName);
                                                                            int size = Integer.parseInt(Generator.getArrPosition());
                                                                            if(size >= maxSize){
                                                                                Generator.error("# ERROR: Size mismatch on array " + varName + ".", true);
                                                                            }
                                                                            String array = Generator.getArrTemp();
                                                                            String temp = Generator.newTempVar();
                                                                            for(int k = 0; k <= size; k++){
                                                                                Generator.assignment(temp, array + Generator.arrIndex(Integer.toString(k)));
                                                                                Generator.assignment(varName + Generator.arrIndex(Integer.toString(k)), temp);
                                                                            }
                                                                            Generator.resetArray();
                                                                        }
                                                                            
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$19 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  if(SymbolTable.findInCurrentBlock(v))
                                                                            Generator.varDeclared(v);   
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$18 ::= 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variable ::= VAR OSB expression CSB 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  String tmp = SymbolTable.varBlock(v);
                                                                        if(SymbolTable.find(v)){
                                                                            if(SymbolTable.findInCurrentBlock(tmp)){ 
                                                                                RESULT = tmp; 
                                                                            }
                                                                            else {
                                                                                int blk = SymbolTable.inWhichBlock(v); 
                                                                                if(blk > 0){ 
                                                                                    RESULT = v + "_" + blk; 
                                                                                }
                                                                                else { 
                                                                                    RESULT = v; 
                                                                                }
                                                                            }
                                                                            RESULT = RESULT + Generator.rangeCheck(v, e);
                                                                        }
                                                                        else { 
                                                                            RESULT = v; 
                                                                        } 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variable ::= VAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String tmp = SymbolTable.varBlock(v);
                                                                        if(SymbolTable.find(v)){
                                                                            if(SymbolTable.findInCurrentBlock(tmp)){ 
                                                                                RESULT = tmp; 
                                                                            }
                                                                            else {
                                                                                int blk = SymbolTable.inWhichBlock(v); 
                                                                                if(blk > 0){ 
                                                                                    RESULT = v + "_" + blk; 
                                                                                }
                                                                                else { 
                                                                                    RESULT = v; 
                                                                                }
                                                                            }
                                                                        }
                                                                        else { 
                                                                            RESULT = v; 
                                                                        } 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // elseCond ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseCond",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // elseCond ::= ELSE sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseCond",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stepPart ::= 
            {
              String RESULT =null;
		  RESULT = "1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stepPart",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stepPart ::= STEP expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e.getT(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stepPart",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // downToPart ::= DOWNTO 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("downToPart",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // toPart ::= TO 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toPart",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // forPART ::= FOR 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forPART",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // doPART ::= DO 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doPART",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // whilePART ::= WHILE 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilePART",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ifPART ::= IF 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifPART",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condition ::= OP condition CP 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condition ::= condition OR NT$17 condition 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.operator(Generator.OR, c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$17 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.label(c1.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condition ::= condition AND NT$16 condition 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.operator(Generator.AND, c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$16 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.label(c1.getT()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condition ::= NOT condition 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.operator(Generator.NOT, c1, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition ::= expression GTOREQ expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.GTOREQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condition ::= expression GT expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.GT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condition ::= expression LTOREQ expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.LTOREQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condition ::= expression LT expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.LT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condition ::= expression NOTEQ expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.NOTEQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condition ::= expression EQ expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.EQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= typeCast cast 
            {
              Tag RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(c.getF() != "checked"){
                                                                            RESULT = Generator.cast(Generator.MIN, t, c, null, " ");
                                                                        }
                                                                        else {
                                                                            RESULT = c;
                                                                        }
                                                                        RESULT.setF(t);  
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= operator 
            {
              Tag RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag n = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= OP expression CP 
            {
              Tag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= variable NT$15 ASIG assignedValue 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String varName = v;
                                                                        if(v.contains("["))
                                                                            varName = v.substring(0, v.indexOf("["));
                                                                        /* First type check */
                                                                        if(SymbolTable.get(varName).contains(Type.INT) && e.getF().contains(Type.FLOAT)){
                                                                            Generator.error("# ERROR: Variable '" + v + "' is of type INT, not FLOAT.", true);
                                                                        }
                                                                        /* Array initialization */
                                                                        if (e.getT().equals(Generator.getArrTemp())){
                                                                            int maxSize = SymbolTable.sizeArray(varName);
                                                                            String replacement = e.getF();
                                                                            int k = 0;
                                                                            while(replacement.charAt(k) < 60)
                                                                                k++;
                                                                            replacement = e.getF().substring(0, k);
                                                                            int size = Integer.parseInt(replacement);
                                                                            if(size >= maxSize){
                                                                                Generator.error("# ERROR: Size mismatch on array " + varName + ".", true);
                                                                            }
                                                                            String array = e.getT();
                                                                            String temp = Generator.newTempVar();
                                                                            for(int i = 0; i <= size; i++){
                                                                                Generator.assignment(temp, array + Generator.arrIndex(Integer.toString(i)));
                                                                                Generator.assignment(varName + Generator.arrIndex(Integer.toString(i)), temp);
                                                                            }
                                                                            Generator.assignment(varName, array);
                                                                            Generator.resetArray();
                                                                            RESULT = new Tag(varName, SymbolTable.get(varName));
                                                                        }
                                                                        else{ /* Other types */
                                                                            /* Type of the variable */
                                                                            String typeA = "";
                                                                            if(v.contains("["))
                                                                                typeA = SymbolTable.get(v.substring(0, v.indexOf("[")));
                                                                            else
                                                                                typeA = SymbolTable.get(v);
                                                                            
                                                                            /* Type of the expression */
                                                                            String typeB = e.getF();
                                                                            /* Assign an array[position] to another array */
                                                                            if(!v.contains("[") && !e.getT().contains("[") && typeA.contains(Type.ARRAY) && typeB.contains(Type.ARRAY)){
                                                                                int open = typeA.indexOf("[");
                                                                                int close = typeA.indexOf("]");
                                                                                int sizeA = Integer.parseInt(typeA.substring(open + 1, close));
                                                                                open = typeB.indexOf("[");
                                                                                close = typeB.indexOf("]");
                                                                                int sizeB = Integer.parseInt(typeB.substring(open + 1, close));
                                                                                if(sizeA < sizeB){
                                                                                    Generator.error("# ERROR: Size of array '" + v + "' is less than the size of the array." + e.getT() + ".", true);
                                                                                }
                                                                                String temp = Generator.newTempVar();
                                                                                for(int k = 0; k < sizeB; k++){
                                                                                    Generator.assignment(temp, e.getT() + Generator.arrIndex(Integer.toString(k)));
                                                                                    Generator.assignment(v + Generator.arrIndex(Integer.toString(k)), temp);
                                                                                }
                                                                                Generator.assignment(v, e.getT());
                                                                                RESULT = new Tag(v, typeA);
                                                                            }
                                                                            else{
                                                                                Generator.initTypes(v, e, typeA, typeB);
                                                                                RESULT = new Tag(v, typeA);
                                                                            }
                                                                            
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$15 ::= 
            {
              Tag RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  String varName = v;
                                                                        if(v.contains("["))
                                                                            varName = v.substring(0, v.indexOf("["));
                                                                        if(!SymbolTable.find(varName))
                                                                            Generator.varNotDeclared(varName); 
                                                                        
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= DEC variable 
            {
              Tag RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(!SymbolTable.find(v))
                                                                            Generator.varNotDeclared(v); 
                                                                        RESULT = Generator.increment(Generator.DECL, v, Generator.ONE);
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= variable DEC 
            {
              Tag RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(!SymbolTable.find(v))
                                                                            Generator.varNotDeclared(v);   
                                                                        RESULT = Generator.increment(Generator.DECR, v, Generator.ONE);
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= INC variable 
            {
              Tag RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(!SymbolTable.find(v))
                                                                            Generator.varNotDeclared(v); 
                                                                        RESULT = Generator.increment(Generator.INCL, v, Generator.ONE);
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= variable INC 
            {
              Tag RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(!SymbolTable.find(v))
                                                                            Generator.varNotDeclared(v); 
                                                                        RESULT = Generator.increment(Generator.INCR, v, Generator.ONE);
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= MINUS expression 
            {
              Tag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.MIN, "", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression MOD expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.MOD, "", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression DIV expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.DIV, "/", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression MUL expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.MUL, "*", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression MINUS expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.MINUS, "-", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression PLUS expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.PLUS, "+", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // block ::= OB CB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // block ::= OB NT$13 listSentence NT$14 CB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  SymbolTable.endBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$13 ::= 
            {
              Object RESULT =null;
  SymbolTable.startBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // printSentence ::= PRINT OP expression CP SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  Generator.print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printSentence",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // forDownToSentence ::= forPART expression downToPart expression NT$11 stepPart DO NT$12 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
                                                                                    Generator.gotoLabel(to);
                                                                                    Generator.label( ((Tag) RESULT).getF() );
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forDownToSentence",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.increment(Generator.DECL, e1.getT(), step); //we use this increment since we need e1 = e1 - step
                                                                                    Generator.gotoLabel(tag);
                                                                                    Generator.label( ((Tag) RESULT).getT() );
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$11 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(tag);
                                                                                    RESULT = Generator.condition(Generator.GTOREQ, e1, e2);
                                                                                    Generator.label(to);
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // forInSentence ::= forPART operator IN assignedValue NT$10 DO sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag array = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  Generator.gotoLabel( ((Tag) RESULT).getT() );
                                                                                    Generator.label( ((Tag) RESULT).getF() );
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forInSentence",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$10 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag array = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  if(e.getF().contains(Type.INT) && array.getF().contains(Type.FLOAT)){
                                                                                        Generator.error("# ERROR: Variable '" + e.getT() + "' is of type INT, not FLOAT.", true);
                                                                                    }
                                                                                    else if(e.getF().contains(Type.FLOAT) && array.getF().contains(Type.INT)){
                                                                                        Generator.error("# ERROR: Variable '" + e.getT() + "' is of type FLOAT, not INT.", true);
                                                                                    }/*
                                                                                    else if(!array.getF().contains(Type.ARRAY)){
                                                                                        Generator.error("# ERROR: Variable '" + array.getT() + "' is not an ARRAY.", true);
                                                                                    }
                                                                                    */
                                                                                    RESULT = Generator.forInLoop(e, array);
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // forToSentence ::= forPART expression toPart expression NT$8 stepPart DO NT$9 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
                                                                                    Generator.gotoLabel(to);
                                                                                    Generator.label( ((Tag) RESULT).getF() );
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forToSentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.increment(Generator.INCL, e1.getT(), step); //we use this increment since we need e1 = e1 + step
                                                                                    Generator.gotoLabel(tag);
                                                                                    Generator.label( ((Tag) RESULT).getT() );
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$8 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(tag);
                                                                                    RESULT = Generator.condition(Generator.LTOREQ, e1, e2);
                                                                                    Generator.label(to);
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // forSentence ::= forPART OP expression SEMICOLON NT$5 condition SEMICOLON NT$6 expression CP NT$7 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  Generator.gotoLabel(RESULT.toString());  
                                                                        Generator.label(c.getF()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forSentence",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag e2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.gotoLabel(tag);  
                                                                        Generator.label(c.getT()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  RESULT = Generator.newLabel();  
                                                                        Generator.label(RESULT.toString()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag e1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.label(tag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // doWhileSentence ::= doPART NT$4 sentence WHILE OP condition CP SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  Generator.label(c.getT());  
                                                                        Generator.gotoLabel(tag);  
                                                                        Generator.label(c.getF()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileSentence",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(tag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // whileSentence ::= whilePART NT$2 OP condition NT$3 CP sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  Generator.gotoLabel(tag);  
                                                                        Generator.label(c.getF()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileSentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(c.getT()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(tag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ifSentence ::= ifPART OP condition NT$0 CP sentence NT$1 elseCond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  Generator.label(tag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifSentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
  Generator.gotoLabel(tag);  
                                                                        Generator.label(c.getF()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(c.getT()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentence ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentence ::= printSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentence ::= forInSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentence ::= forDownToSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentence ::= forToSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentence ::= forSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentence ::= doWhileSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentence ::= whileSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= ifSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentence ::= expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentence ::= varDeclaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listSentence ::= listSentence sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listSentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // listSentence ::= sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listSentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= listSentence EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

